package frms.conrm;

import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;

public class ConRoomCalendar extends javax.swing.JPanel {

    public static String date;
    public static String str2 = "";
    public static String[] columnName = null;
    public static String[][] dataA = null;
    public static String[][] dataB = null;
    public static ArrayList time_reserveA = null;
    public static ArrayList time_reserveB = null;
    public static ArrayList<String> rowA = null;
    public static ArrayList<ArrayList<String>> table_reserveA = null;

    public ConRoomCalendar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnView = new javax.swing.JButton();

        btnView.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnView.setText("View to Reserve");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(btnView)
                .addContainerGap(153, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(407, Short.MAX_VALUE)
                .addComponent(btnView)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed


        int year = cldrView.getDate().getYear() + 1900;
        int month = cldrView.getDate().getMonth() + 1;
        int day = cldrView.getDate().getDate();
        int day_of_week = cldrView.getDate().getDay();


        if (day_of_week == 0) {
            JOptionPane.showMessageDialog(null, "Cannot reserve Sunday");
        } else if (day_of_week == 6) {
            JOptionPane.showMessageDialog(null, "Cannot reserve Saturday");
        } else {
            if ((month < Calendar.getInstance().get(Calendar.MONTH) + 1)
                    && (year < Calendar.getInstance().get(Calendar.YEAR))) {
                JOptionPane.showMessageDialog(null, "Cannot reserve Conference Room in the selected year, month and day");
            } else if ((month >= Calendar.getInstance().get(Calendar.MONTH) + 1)
                    && (year >= Calendar.getInstance().get(Calendar.YEAR))) {
                CardLayout card = (CardLayout) ConRoomSchedule.pnlRight.getLayout();
                card.show(ConRoomSchedule.pnlRight, "cardReserve");

                date = String.valueOf(year) + "-" + String.valueOf(month).format("%02d", month)
                        + "-" + String.valueOf(day).format("%02d", day);
                String[] str1 = cldrView.getDate().toGMTString().split("\\s+");
                for (int i = 0; i < 3; i++) {
                    str2 += str1[i] + " ";
                }
                
                ConRoom_Approval.lbldateApprove.setText(str2);
                ConRoomReserve.lbldateReserve.setText(str2);

                ConRoomReserve.tblReserveA.setModel(new DefaultTableModel(frms.Home.database.
                        getTableReserve(ConRoomReserve.reserve_column), ConRoomReserve.reserve_column_header));
                ConRoomReserve.tblReserveB.setModel(new DefaultTableModel(frms.Home.database.
                        getTableReserve(ConRoomReserve.reserve_column), ConRoomReserve.reserve_column_header));
                manipulateTableReserve();

            } else if ((month < Calendar.getInstance().get(Calendar.MONTH) + 1)
                    && (year >= Calendar.getInstance().get(Calendar.YEAR))) {
                JOptionPane.showMessageDialog(null, "Cannot reserve Conference Room in the selected month");
            } else if ((month >= Calendar.getInstance().get(Calendar.MONTH) + 1)
                    && (year < Calendar.getInstance().get(Calendar.YEAR))) {
                JOptionPane.showMessageDialog(null, "Cannot reserve Conference Room in the selected year");
            }
        }


    }//GEN-LAST:event_btnViewActionPerformed

    public static void manipulateTableReserve() {

        columnName = new String[]{"Time-Start", "Time-End", "Availability"};
        int nRow = ConRoomReserve.tblReserveA.getRowCount();
        time_reserveA = new ArrayList();
        time_reserveB = new ArrayList();
        table_reserveA = new ArrayList<ArrayList<String>>();


//Storing to arraylist

        for (int i = 0; i < nRow; i++) {
            rowA = new ArrayList<String>();
            for (int j = 1; j < 4; j++) {
                rowA.add(ConRoomReserve.tblReserveA.getModel().getValueAt(i, j).toString());
            }

            table_reserveA.add(rowA);
        }

//Storing to array

        for (int i = 0; i < table_reserveA.size(); i++) {
            //check if it's Con A or Con B
            for (int j = 0; j < 3; j++) {
                if (table_reserveA.get(i).get(j).equals("A")) {
                    for (int k = 0; k < 2; k++) {
                        time_reserveA.add(table_reserveA.get(i).get(k));
                    }
                } else if (table_reserveA.get(i).get(j).equals("B")) {
                    for (int k = 0; k < 2; k++) {
                        time_reserveB.add(table_reserveA.get(i).get(k));
                    }
                }
            }
        }

//Check for the presence of 8 and 17 for A

        boolean ok = false, ok2 = false;
        for (int i = 0; i < time_reserveA.size(); i++) {
            String str = time_reserveA.get(i).toString();
            if (str.indexOf("08") != -1) {
                ok = true;
                break;
            } else {
                ok = false;
            }
        }
        if (ok == false) {
            time_reserveA.add(0, "08");
        }
        for (int i = 0; i < time_reserveA.size(); i++) {
            String str = time_reserveA.get(i).toString();
            if (str.indexOf("17") != -1) {
                ok2 = true;
                break;
            } else {
                ok2 = false;
            }
        }
        if (ok2 == false) {
            time_reserveA.add(time_reserveA.size(), "17");
        }

//Check for the presence of 8 and 17 for B

        boolean ok3 = false, ok4 = false;
        for (int i = 0; i < time_reserveB.size(); i++) {
            String str = time_reserveB.get(i).toString();
            if (str.indexOf("08") != -1) {
                ok3 = true;
                break;
            } else {
                ok3 = false;
            }
        }
        if (ok3 == false) {
            time_reserveB.add(0, "08");
        }
        for (int i = 0; i < time_reserveB.size(); i++) {
            String str = time_reserveB.get(i).toString();
            if (str.indexOf("17") != -1) {
                ok4 = true;
                break;
            } else {
                ok4 = false;
            }
        }
        if (ok4 == false) {
            time_reserveB.add(time_reserveB.size(), "17");
        }

//check if there are repeating numbers in the arraylist for A

        for (int i = 0; i < time_reserveA.size() - 1; i++) {
            if (time_reserveA.get(i).equals(time_reserveA.get(i + 1))) {
                time_reserveA.remove(i);
            }
        }
//check if there are repeating numbers in the arraylist for B

        for (int i = 0; i < time_reserveB.size() - 1; i++) {
            if (time_reserveB.get(i).equals(time_reserveB.get(i + 1))) {
                time_reserveB.remove(i);
            }
        }

//assigning values to the dataA [][]

        boolean check = false;
        dataA = new String[time_reserveA.size() - 1][3];
        for (int i = 0; i < time_reserveA.size() - 1; i++) {
            while (time_reserveA.get(i) != "17") {

                dataA[i][0] = time_reserveA.get(i).toString();
                dataA[i][1] = time_reserveA.get(i + 1).toString();
                for (int j = 0; j < table_reserveA.size(); j++) {
                    if (time_reserveA.get(i) == table_reserveA.get(j).get(0)) {
                        check = true;
                        break;
                    } else {
                        check = false;
                    }
                }
                if (check == true) {
                    dataA[i][2] = "Occupied";

                } else {
                    dataA[i][2] = "Vacant";
                }
                break;

            }
        }

//assigning values to the dataB [][]

        boolean check1 = false;
        dataB = new String[time_reserveB.size() - 1][3];
        for (int i = 0; i < time_reserveB.size() - 1; i++) {
            while (time_reserveB.get(i) != "17") {

                dataB[i][0] = time_reserveB.get(i).toString();
                dataB[i][1] = time_reserveB.get(i + 1).toString();
                for (int j = 0; j < table_reserveA.size(); j++) {
                    if (time_reserveB.get(i) == table_reserveA.get(j).get(0)) {
                        check1 = true;
                        break;
                    } else {
                        check1 = false;
                    }
                }
                if (check1 == true) {
                    dataB[i][2] = "Occupied";

                } else {
                    dataB[i][2] = "Vacant";
                }
                break;

            }
        }
//updating the table
        ConRoomReserve.tblReserveA.setModel(new DefaultTableModel(dataA, columnName));
//updating the table
        ConRoomReserve.tblReserveB.setModel(new DefaultTableModel(dataB, columnName));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnView;
    // End of variables declaration//GEN-END:variables
}
