package frms.bre.panels;

import javax.swing.*;
import mysql.Database;

public class BREInfo extends javax.swing.JPanel {
    mysql.Database database = new mysql.Database();
    public String message;

    /**
     * Creates new form BREInfo
     */
    public BREInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblItemTitle = new javax.swing.JLabel();
        tbpBRE = new javax.swing.JTabbedPane();
        pnlBooks = new javax.swing.JPanel();
        lblItemNumber_bk = new javax.swing.JLabel();
        lblBPN_bk = new javax.swing.JLabel();
        lblTitle_bk = new javax.swing.JLabel();
        lblAuthor_bk = new javax.swing.JLabel();
        lblQuantity_bk = new javax.swing.JLabel();
        txtItemNumber_bk = new javax.swing.JTextField();
        txtBPN_bk = new javax.swing.JTextField();
        txtTitle_bk = new javax.swing.JTextField();
        txtAuthor_bk = new javax.swing.JTextField();
        txtQuantity_bk = new javax.swing.JTextField();
        pnlReports = new javax.swing.JPanel();
        lblItemNumber_rp = new javax.swing.JLabel();
        lblTitle_rp = new javax.swing.JLabel();
        lblAuthor_rp = new javax.swing.JLabel();
        txtItemNumber_rp = new javax.swing.JTextField();
        txtTitle_rp = new javax.swing.JTextField();
        txtAuthor_rp = new javax.swing.JTextField();
        lblQuantity_rp = new javax.swing.JLabel();
        txtQuantity_rp = new javax.swing.JTextField();
        pnlEquipment = new javax.swing.JPanel();
        lblItemNumber_eq = new javax.swing.JLabel();
        lblBPN_eq = new javax.swing.JLabel();
        lblDescription_eq = new javax.swing.JLabel();
        lblSerialNumber_eq = new javax.swing.JLabel();
        txtItemNumber_eq = new javax.swing.JTextField();
        txtBPN_eq = new javax.swing.JTextField();
        txtDescription_eq = new javax.swing.JTextField();
        txtSerialNumber_eq = new javax.swing.JTextField();
        lblQuantity_eq = new javax.swing.JLabel();
        txtQuantity_eq = new javax.swing.JTextField();
        pnlBREButton = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        chkConfirm = new javax.swing.JCheckBox();

        lblItemTitle.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblItemTitle.setText("");

        tbpBRE.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        tbpBRE.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tbpBREStateChanged(evt);
            }
        });
        tbpBRE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tbpBREFocusGained(evt);
            }
        });

        lblItemNumber_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblItemNumber_bk.setText("Item Number:");

        lblBPN_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblBPN_bk.setText("BIR Property Number:");

        lblTitle_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblTitle_bk.setText("Title:");

        lblAuthor_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblAuthor_bk.setText("Author:");

        lblQuantity_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblQuantity_bk.setText("Quantity:");

        txtItemNumber_bk.setColumns(8);
        txtItemNumber_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtItemNumber_bk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNumber_bkKeyReleased(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemNumber_bkKeyPressed(evt);
            }
        });

        txtBPN_bk.setColumns(16);
        txtBPN_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtTitle_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtAuthor_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtQuantity_bk.setColumns(5);
        txtQuantity_bk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnlBooksLayout = new javax.swing.GroupLayout(pnlBooks);
        pnlBooks.setLayout(pnlBooksLayout);
        pnlBooksLayout.setHorizontalGroup(
            pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBooksLayout.createSequentialGroup()
                .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBooksLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBooksLayout.createSequentialGroup()
                                .addComponent(lblBPN_bk)
                                .addGap(18, 18, 18)
                                .addComponent(txtBPN_bk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBooksLayout.createSequentialGroup()
                                .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTitle_bk)
                                    .addComponent(lblAuthor_bk))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTitle_bk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAuthor_bk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(pnlBooksLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblQuantity_bk)
                        .addGap(18, 18, 18)
                        .addComponent(txtQuantity_bk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBooksLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblItemNumber_bk)
                        .addGap(18, 18, 18)
                        .addComponent(txtItemNumber_bk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        pnlBooksLayout.setVerticalGroup(
            pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBooksLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemNumber_bk)
                    .addComponent(txtItemNumber_bk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBPN_bk)
                    .addComponent(txtBPN_bk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle_bk)
                    .addComponent(txtTitle_bk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAuthor_bk)
                    .addComponent(txtAuthor_bk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity_bk)
                    .addComponent(txtQuantity_bk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        tbpBRE.addTab("Books", pnlBooks);

        lblItemNumber_rp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblItemNumber_rp.setText("Item Number:");

        lblTitle_rp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblTitle_rp.setText("Title:");

        lblAuthor_rp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblAuthor_rp.setText("Author:");

        txtItemNumber_rp.setColumns(8);
        txtItemNumber_rp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtItemNumber_rp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNumber_rpKeyReleased(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemNumber_rpKeyPressed(evt);
            }
        });

        txtTitle_rp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtAuthor_rp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        lblQuantity_rp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblQuantity_rp.setText("Quantity:");

        txtQuantity_rp.setColumns(5);
        txtQuantity_rp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnlReportsLayout = new javax.swing.GroupLayout(pnlReports);
        pnlReports.setLayout(pnlReportsLayout);
        pnlReportsLayout.setHorizontalGroup(
            pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReportsLayout.createSequentialGroup()
                .addGroup(pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlReportsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblItemNumber_rp)
                        .addGap(18, 18, 18)
                        .addComponent(txtItemNumber_rp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlReportsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle_rp)
                            .addComponent(lblAuthor_rp)
                            .addComponent(lblQuantity_rp))
                        .addGap(18, 18, 18)
                        .addGroup(pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTitle_rp, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addComponent(txtAuthor_rp, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addComponent(txtQuantity_rp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        pnlReportsLayout.setVerticalGroup(
            pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReportsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemNumber_rp)
                    .addComponent(txtItemNumber_rp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle_rp)
                    .addComponent(txtTitle_rp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAuthor_rp)
                    .addComponent(txtAuthor_rp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity_rp)
                    .addComponent(txtQuantity_rp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        tbpBRE.addTab("Reports", pnlReports);

        lblItemNumber_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblItemNumber_eq.setText("Item Number:");

        lblBPN_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblBPN_eq.setText("BIR Property Number:");

        lblDescription_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblDescription_eq.setText("Description:");

        lblSerialNumber_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblSerialNumber_eq.setText("Serial Number:");

        txtItemNumber_eq.setColumns(8);
        txtItemNumber_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtItemNumber_eq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNumber_eqKeyReleased(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemNumber_eqKeyPressed(evt);
            }
        });

        txtBPN_eq.setColumns(16);
        txtBPN_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtDescription_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtSerialNumber_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        lblQuantity_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblQuantity_eq.setText("Quantity:");

        txtQuantity_eq.setColumns(5);
        txtQuantity_eq.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnlEquipmentLayout = new javax.swing.GroupLayout(pnlEquipment);
        pnlEquipment.setLayout(pnlEquipmentLayout);
        pnlEquipmentLayout.setHorizontalGroup(
            pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEquipmentLayout.createSequentialGroup()
                .addGroup(pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEquipmentLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblItemNumber_eq)
                        .addGap(18, 18, 18)
                        .addComponent(txtItemNumber_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEquipmentLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblBPN_eq)
                        .addGap(18, 18, 18)
                        .addComponent(txtBPN_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEquipmentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDescription_eq)
                            .addComponent(lblSerialNumber_eq)
                            .addComponent(lblQuantity_eq))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQuantity_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSerialNumber_eq, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescription_eq, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        pnlEquipmentLayout.setVerticalGroup(
            pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEquipmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemNumber_eq)
                    .addComponent(txtItemNumber_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBPN_eq)
                    .addComponent(txtBPN_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescription_eq)
                    .addComponent(txtDescription_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSerialNumber_eq)
                    .addComponent(txtSerialNumber_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity_eq)
                    .addComponent(txtQuantity_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        tbpBRE.addTab("Equipment", pnlEquipment);

        btnAdd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        pnlBREButton.add(btnAdd);

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlBREButton.add(btnUpdate);

        btnDelete.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlBREButton.add(btnDelete);

        chkConfirm.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        chkConfirm.setText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblItemTitle)
            .addComponent(tbpBRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkConfirm)
                    .addComponent(pnlBREButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblItemTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbpBRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkConfirm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBREButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tbpBRE.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void txtItemNumber_bkKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNumber_bkKeyReleased
        setTextFieldCapital(tab(), getTextField(tab())); //CAPITALIZE
        setTextFields(tab(), getButtonNumber());
    }//GEN-LAST:event_txtItemNumber_bkKeyReleased

    private void txtItemNumber_rpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNumber_rpKeyReleased
        setTextFieldCapital(tab(), getTextField(tab())); //CAPITALIZE
        setTextFields(tab(), getButtonNumber());
    }//GEN-LAST:event_txtItemNumber_rpKeyReleased

    private void txtItemNumber_eqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNumber_eqKeyReleased
        setTextFieldCapital(tab(), getTextField(tab())); //CAPITALIZE
        setTextFields(tab(), getButtonNumber());
    }//GEN-LAST:event_txtItemNumber_eqKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (areOneOfTextfieldsEmpty(tab())) {
            JOptionPane.showMessageDialog(null, "Please enter required fields.",
                    "Update Item", 1);
        } else {

            if (others.Validation.isN(getQuantity(tab()))) {
                getData(tab());
                if (chkConfirm.isSelected()) {
                    updateItem(getData(tab()), tab());
                } else {
                    if (JOptionPane.showConfirmDialog(null, message,
                            "Update Item", 0, 3) == 0) {
                        updateItem(getData(tab()), tab());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Please enter a valid quantity.", "Update Item", 1);
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed
    private void txtItemNumber_rpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNumber_rpKeyPressed
        pressEnterKey(evt.getKeyCode(), tab(), isItemExisted());
    }//GEN-LAST:event_txtItemNumber_rpKeyPressed

    private void txtItemNumber_bkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNumber_bkKeyPressed
        pressEnterKey(evt.getKeyCode(), tab(), isItemExisted());
    }//GEN-LAST:event_txtItemNumber_bkKeyPressed

    private void txtItemNumber_eqKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNumber_eqKeyPressed
        pressEnterKey(evt.getKeyCode(), tab(), isItemExisted());
    }//GEN-LAST:event_txtItemNumber_eqKeyPressed

    private void tbpBREStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tbpBREStateChanged
        setTextFields();
        if (getButtonNumber() == 1) { //The update button is clicked.
            setComponents(true, tab());
        } else {
            setTextFields(tab(), getButtonNumber());
        }
    }//GEN-LAST:event_tbpBREStateChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (areOneOfTextfieldsEmpty(tab())) {
            JOptionPane.showMessageDialog(null, "Please enter required fields.",
                    "Add Item", 1);
        } else {
            if (others.Validation.isN(getQuantity(tab()))) {
                getData(tab());
                if (chkConfirm.isSelected()) {
                    addItem(getData(tab()), tab());
                } else {
                    if (JOptionPane.showConfirmDialog(null, message, "Add Item",
                            0, 3) == 0) {
                        addItem(getData(tab()), tab());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Please enter a valid quantity.", "Add Item", 1);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tbpBREFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbpBREFocusGained
        if (getButtonNumber() == 0) {
            txtItemNumber_bk.setText(generateItemNumber());
        } else {
            txtItemNumber_bk.setText(null);
        }
    }//GEN-LAST:event_tbpBREFocusGained

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (chkConfirm.isSelected()) {
            deleteItem(tab()); //delete item
            setComponents(true, tab()); //components behavior
            setTextFields(); //clear fields
            JOptionPane.showMessageDialog(null, "Delete successful.",
                    "Delete Item", 1);
        } else {
            if (JOptionPane.showConfirmDialog(null, "Delete?", "Delete Item", 0)
                    == 0) {
                deleteItem(tab()); //delete item
                setComponents(true, tab()); //components behavior
                setTextFields(); //clear fields
                JOptionPane.showMessageDialog(null, "Delete successful.",
                        "Delete Item", 1);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnAdd;
    public static javax.swing.JButton btnDelete;
    public static javax.swing.JButton btnUpdate;
    public static javax.swing.JCheckBox chkConfirm;
    private javax.swing.JLabel lblAuthor_bk;
    private javax.swing.JLabel lblAuthor_rp;
    private javax.swing.JLabel lblBPN_bk;
    private javax.swing.JLabel lblBPN_eq;
    private javax.swing.JLabel lblDescription_eq;
    private javax.swing.JLabel lblItemNumber_bk;
    private javax.swing.JLabel lblItemNumber_eq;
    private javax.swing.JLabel lblItemNumber_rp;
    public static javax.swing.JLabel lblItemTitle;
    private javax.swing.JLabel lblQuantity_bk;
    private javax.swing.JLabel lblQuantity_eq;
    private javax.swing.JLabel lblQuantity_rp;
    private javax.swing.JLabel lblSerialNumber_eq;
    private javax.swing.JLabel lblTitle_bk;
    private javax.swing.JLabel lblTitle_rp;
    public static javax.swing.JPanel pnlBREButton;
    private javax.swing.JPanel pnlBooks;
    private javax.swing.JPanel pnlEquipment;
    private javax.swing.JPanel pnlReports;
    public static javax.swing.JTabbedPane tbpBRE;
    public static javax.swing.JTextField txtAuthor_bk;
    public static javax.swing.JTextField txtAuthor_rp;
    public static javax.swing.JTextField txtBPN_bk;
    public static javax.swing.JTextField txtBPN_eq;
    public static javax.swing.JTextField txtDescription_eq;
    public static javax.swing.JTextField txtItemNumber_bk;
    public static javax.swing.JTextField txtItemNumber_eq;
    public static javax.swing.JTextField txtItemNumber_rp;
    public static javax.swing.JTextField txtQuantity_bk;
    public static javax.swing.JTextField txtQuantity_eq;
    public static javax.swing.JTextField txtQuantity_rp;
    public static javax.swing.JTextField txtSerialNumber_eq;
    public static javax.swing.JTextField txtTitle_bk;
    public static javax.swing.JTextField txtTitle_rp;
    // End of variables declaration//GEN-END:variables

    /**
     * The text fields are cleared.
     */
    public static void setTextFields() {
        /* Books */
        txtItemNumber_bk.setText(null);
        txtBPN_bk.setText(null);
        txtTitle_bk.setText(null);
        txtAuthor_bk.setText(null);
        txtQuantity_bk.setText(null);

        /* Reports */
        txtItemNumber_rp.setText(null);
        txtTitle_rp.setText(null);
        txtAuthor_rp.setText(null);
        txtQuantity_rp.setText(null);

        /* Equipment */
        txtItemNumber_eq.setText(null);
        txtBPN_eq.setText(null);
        txtDescription_eq.setText(null);
        txtSerialNumber_eq.setText(null);
        txtQuantity_eq.setText(null);
    }

    /**
     * Get tab index
     *
     * @return A tab index. The value of books, reports and equipment is 0, 1
     * and 2, respectively.
     */
    public int tab() {
        return tbpBRE.getSelectedIndex();
    }

    /**
     *
     * @param tab A tab index.
     * @return
     */
    public String getTextField(int tab) {
        return tab == 0
                ? txtItemNumber_bk.getText()
                : tab == 1
                ? txtItemNumber_rp.getText()
                : txtItemNumber_eq.getText();
    }

    /**
     *
     * @param b UPDATE: true :: ADD: false
     *
     */
    private void setComponents(boolean b, int tab) {
        if (tab == 0) { //Books
            txtItemNumber_bk.setEnabled(b);
            txtBPN_bk.setEnabled(!b);
            txtTitle_bk.setEnabled(!b);
            txtAuthor_bk.setEnabled(!b);
            txtQuantity_bk.setEnabled(!b);

            /* FOCUS */
            if (getButtonNumber() == 1) {
                txtItemNumber_bk.requestFocusInWindow();
            } else {
                txtBPN_bk.requestFocusInWindow();
            }

        } else if (tab == 1) { //Reports
            txtItemNumber_rp.setEnabled(b);
            txtTitle_rp.setEnabled(!b);
            txtAuthor_rp.setEnabled(!b);
            txtQuantity_rp.setEnabled(!b);

            /* FOCUS */
            if (getButtonNumber() == 1) {
                txtItemNumber_rp.requestFocusInWindow();
            } else {
                txtTitle_rp.requestFocusInWindow();
            }

        } else if (tab == 2) { //Equipment
            txtItemNumber_eq.setEnabled(b);
            txtBPN_eq.setEnabled(!b);
            txtDescription_eq.setEnabled(!b);
            txtSerialNumber_eq.setEnabled(!b);
            txtQuantity_eq.setEnabled(!b);

            /* FOCUS */
            if (getButtonNumber() == 1) {
                txtItemNumber_eq.requestFocusInWindow();
            } else {
                txtBPN_eq.requestFocusInWindow();
            }
        }

        if (getButtonNumber() == 1) {
            chkConfirm.setVisible(!b);
            btnUpdate.setVisible(!b);
            btnDelete.setVisible(!b);
        }
    }

    private void pressEnterKey(int keyCode, int tab, boolean exist) {
        if (keyCode == 10 && exist) {
            setComponents(false, tab);
        }
    }

    public boolean isItemExisted() {
        return frms.Home.database.isItemExisted(getTextField(tab()),
                tab());
    }

    public int getButtonNumber() {
        return frms.bre.BRE.button;
    }

    public String generateItemNumber() {
        return mymath.CheckNumber.CheckNumber(tab());
    }

    private void setTextFields(int tab, int buttonNumber) {
        if (tab == 0) {
            if (buttonNumber == 1) {
                txtBPN_bk.setText(isItemExisted() ? mysql.Database.book[0] : "");
                txtTitle_bk.setText(isItemExisted() ? mysql.Database.book[1] : "");
                txtAuthor_bk.setText(isItemExisted() ? mysql.Database.book[2] : "");
                txtQuantity_bk.setText(isItemExisted() ? mysql.Database.book[3] : "");
            } else {
                txtItemNumber_bk.setText(generateItemNumber());
            }
        } else if (tab == 1) {
            if (buttonNumber == 1) {
                txtTitle_rp.setText(isItemExisted() ? mysql.Database.reports[0] : "");
                txtAuthor_rp.setText(isItemExisted() ? mysql.Database.reports[1] : "");
                txtQuantity_rp.setText(isItemExisted() ? mysql.Database.reports[2] : "");
            } else {
                txtItemNumber_rp.setText(generateItemNumber());
            }
        } else {
            if (buttonNumber == 1) {
                txtBPN_eq.setText(isItemExisted() ? mysql.Database.equip[0] : "");
                txtDescription_eq.setText(isItemExisted() ? mysql.Database.equip[1] : "");
                txtSerialNumber_eq.setText(isItemExisted() ? mysql.Database.equip[2] : "");
                txtQuantity_eq.setText(isItemExisted() ? mysql.Database.equip[3] : "");
            } else {
                txtItemNumber_eq.setText(generateItemNumber());
            }
        }
    }

    public void setTextFieldCapital(int tab, String text) {
        if (tab == 0) {
            txtItemNumber_bk.setText(text.toUpperCase());
        } else if (tab == 1) {
            txtItemNumber_rp.setText(text.toUpperCase());
        } else {
            txtItemNumber_eq.setText(text.toUpperCase());
        }
    }

    private boolean areOneOfTextfieldsEmpty(int tab) {
        return tab == 0
                ? txtTitle_bk.getText().isEmpty() //tab == 0 Start
                || txtAuthor_bk.getText().isEmpty()
                || txtQuantity_bk.getText().isEmpty() //tab == 0 End
                : tab == 1
                ? txtTitle_rp.getText().isEmpty() //tab == 1 Start
                || txtAuthor_rp.getText().isEmpty()
                || txtQuantity_rp.getText().isEmpty()//tab == 1 End
                : txtBPN_eq.getText().isEmpty() //tab == 2 Start
                || txtDescription_eq.getText().isEmpty()
                || txtSerialNumber_eq.getText().isEmpty()
                || txtQuantity_eq.getText().isEmpty(); //tab == 2 End
    }

    public String[] getData(int tab) {
        String[] data = new String[(tab == 0) ? 5 : ((tab == 1) ? 4 : 5)];
        if (tab == 0) {
            data[0] = txtItemNumber_bk.getText();
            data[1] = txtBPN_bk.getText();
            data[2] = txtTitle_bk.getText();
            data[3] = txtAuthor_bk.getText();
            data[4] = txtQuantity_bk.getText();
            message = "Item Number: " + data[0] + "\n"
                    + "BIR Property Number: " + data[1] + "\n"
                    + "Title: " + data[2] + "\n"
                    + "Author: " + data[3] + "\n"
                    + "Quantity: " + data[4] + "\n"
                    + "Confirm?";
        } else if (tab == 1) {
            data[0] = txtItemNumber_rp.getText();
            data[1] = txtTitle_rp.getText();
            data[2] = txtAuthor_rp.getText();
            data[3] = txtQuantity_rp.getText();
            message = "Item Number: " + data[0] + "\n"
                    + "Title: " + data[1] + "\n"
                    + "Author: " + data[2] + "\n"
                    + "Quantity: " + data[3] + "\n"
                    + "Confirm?";
        } else {
            data[0] = txtItemNumber_eq.getText();
            data[1] = txtBPN_eq.getText();
            data[2] = txtDescription_eq.getText();
            data[3] = txtSerialNumber_eq.getText();
            data[4] = txtQuantity_eq.getText();
            message = "Item Number: " + data[0] + "\n"
                    + "BIR Property Number: " + data[1] + "\n"
                    + "Description: " + data[2] + "\n"
                    + "Serial Number: " + data[3] + "\n"
                    + "Quantity: " + data[4] + "\n"
                    + "Confirm?";
        }
        return data;
    }

    private void deleteItem(int tab) {
        String item_num = tab == 0 ? txtItemNumber_bk.getText() //tab == 0
                : tab == 1 ? txtItemNumber_rp.getText() //tab == 1
                : txtItemNumber_eq.getText(); //tab == 2
        frms.Home.database.deleteItem(item_num, tab);

    }

    private void updateItem(String[] data, int tab) {
        /* UPDATE */
        frms.Home.database.updateItem(data, tab);

        /* SET COMPONENTS */
        setComponents(true, tab);

        /* CLEAR TEXTFIELDS */
        setTextFields();

        /* Dialog */
        JOptionPane.showMessageDialog(null, "Update successful.",
                "Update Item", 1);
    }

    private void setGenerateItemNumber(int tab) {
        if (tab == 0) {
            txtItemNumber_bk.setText(generateItemNumber());
        } else if (tab == 1) {
            txtItemNumber_rp.setText(generateItemNumber());
        } else if (tab == 2) {
            txtItemNumber_eq.setText(generateItemNumber());
        }
    }

    private void addItem(String[] data, int tab) {
        /* ADD ITEM */
        frms.Home.database.addItem(data, tab);

        /* SET COMPONENTS */
        setComponents(false, tab);

        /* CLEAR TEXTFIELDS */
        setTextFields();

        /* DIALOG */
        JOptionPane.showMessageDialog(null, "Add successful.",
                "Add Item", 1);

        /*GENERATE ITEM NUMBER*/
        setGenerateItemNumber(tab);
    }

    private String getQuantity(int tab) {
        return tab == 0
                ? txtQuantity_bk.getText()
                : tab == 1
                ? txtQuantity_rp.getText()
                : txtQuantity_eq.getText();
    }
    
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BRE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BRE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BRE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BRE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       
    }

}
