package frms.conrm;

import javax.swing.*;
import java.util.*;
import java.awt.*;

public class ConRoomReserve extends javax.swing.JPanel {


    public static String [] reserve_column;
    public static String [] reserve_column_header;
    public static ArrayList<Integer> timeStart=null;
    public static int item_end;
    public static int temp;


    public ConRoomReserve() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reserve_column = new String[]{
            "conrm_date","conrm_timestart","conrm_timeend","conrm_type","emp_num","emp_dept"
        };
        reserve_column_header = new String[]{
            "Date","Time Start","Time End","Type","Employee Number","Employee Department"
        };
        tblReserveA = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reserve_column = new String[]{
            "conrm_date","conrm_timestart","conrm_timeend","conrm_type","emp_num","emp_dept"
        };
        reserve_column_header = new String[]{
            "Date","Time Start","Time End","Type","Employee Number","Employee Department"
        };
        tblReserveB = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbldateReserve = new javax.swing.JLabel();
        btnNewReserve = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        tblReserveA.setModel(new javax.swing.table.DefaultTableModel(
            frms.Home.database.getTableReserve_conrm(reserve_column),
            reserve_column_header
        ));
        tblReserveA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReserveAMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReserveA);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Schedule:");

        tblReserveB.setModel(new javax.swing.table.DefaultTableModel(
            frms.Home.database.getTableReserve_conrm(reserve_column),
            reserve_column_header
        ));
        tblReserveB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReserveBMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblReserveB);

        jLabel3.setBackground(new java.awt.Color(255, 204, 102));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Conference Room A:");
        jLabel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel3.setOpaque(true);

        jLabel4.setBackground(new java.awt.Color(0, 204, 204));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Conference Room B:");
        jLabel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel4.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        add(jPanel1);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Date:");

        lbldateReserve.setBackground(new java.awt.Color(204, 204, 0));
        lbldateReserve.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lbldateReserve.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        lbldateReserve.setOpaque(true);

        btnNewReserve.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnNewReserve.setText("New Reservation");
        btnNewReserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewReserveActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbldateReserve, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNewReserve, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(65, 65, 65))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbldateReserve, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addComponent(btnNewReserve, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addContainerGap(237, Short.MAX_VALUE))
        );

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewReserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewReserveActionPerformed


        if(temp==0){
            ConRoom_Approval.lblType.setText("");
            int count = tblReserveA.getSelectedRowCount();
            int row = tblReserveA.getSelectedRow();
            int col=tblReserveA.getColumnCount();
            if(ConRoomCalendar.cldrView.getDate().getDate()<Calendar.getInstance().get(Calendar.DATE)){
                JOptionPane.showMessageDialog(null, "Cannot reserve on the specified day");
            }else{
                boolean free=true;
                if(count==0){
                    JOptionPane.showMessageDialog(null, "You havn't selected a row!","Error Message",JOptionPane.ERROR_MESSAGE);
                }else if (count>1){
                    JOptionPane.showMessageDialog(null, "Many rows are selected!","Error Message",JOptionPane.ERROR_MESSAGE);
                }else if(count==1){
                    //loop to check if the selected rowA is occupied or vacant
                    for(int i=0;i<col;i++){
                        if(tblReserveA.getModel().getValueAt(row, i).toString().equals("Occupied")){
                            JOptionPane.showMessageDialog(null, "The schedule is already occupied");
                            free=false;
                        }
                    }
                    //getting the dataA from the selected rowA

                    timeStart = new ArrayList<Integer>();
                    if(free==true){
                        boolean check=false;
                        if(confirm_empNum(check)){

                            CardLayout card=(CardLayout) ConRoomSchedule.pnlRight.getLayout();
                            card.show(ConRoomSchedule.pnlRight, "cardApproval");

                            int item_start=Integer.valueOf(tblReserveA.getModel().getValueAt(row, 0).toString());
                            item_end=Integer.valueOf(tblReserveA.getModel().getValueAt(row, 1).toString());

                            while(item_start!=item_end){
                                timeStart.add(item_start);
                                item_start+=1;
                            }
                            ConRoom_Approval.cmb_timeStarts.setModel(new DefaultComboBoxModel(timeStart.toArray()));
                            ConRoom_Approval.lblType.setText("A");
                        }
                    }
                  }
            }
        }else{
            ConRoom_Approval.lblType.setText("");
            int count = tblReserveB.getSelectedRowCount();
            int row = tblReserveB.getSelectedRow();
            int col=tblReserveB.getColumnCount();
            if(ConRoomCalendar.cldrView.getDate().getDate()<Calendar.getInstance().get(Calendar.DATE)){
                JOptionPane.showMessageDialog(null, "Cannot reserve on the specified day");
            }else{
                boolean free=true;


            if(count==0){
                JOptionPane.showMessageDialog(null, "You havn't selected a row!","Error Message",JOptionPane.ERROR_MESSAGE);
            }else if (count>1){
                JOptionPane.showMessageDialog(null, "Many rows are selected!","Error Message",JOptionPane.ERROR_MESSAGE);
            }else if(count==1){
                //loop to check if the selected rowA is occupied or vacant
                for(int i=0;i<col;i++){
                    if(tblReserveB.getModel().getValueAt(row, i).toString().equals("Occupied")){
                        JOptionPane.showMessageDialog(null, "The schedule is already occupied");
                        free=false;
                    }
                }
                //getting the dataA from the selected rowA

                timeStart = new ArrayList<Integer>();
                if(free==true){
                    boolean check=false;
                    if(confirm_empNum(check)){

                        CardLayout card=(CardLayout) ConRoomSchedule.pnlRight.getLayout();
                        card.show(ConRoomSchedule.pnlRight, "cardApproval");

                        int item_start=Integer.valueOf(tblReserveB.getModel().getValueAt(row, 0).toString());
                        item_end=Integer.valueOf(tblReserveB.getModel().getValueAt(row, 1).toString());

                        while(item_start!=item_end){
                            timeStart.add(item_start);
                            item_start+=1;
                        }
                        ConRoom_Approval.cmb_timeStarts.setModel(new DefaultComboBoxModel(timeStart.toArray()));
                        ConRoom_Approval.lblType.setText("B");
                    }
                }
            }
            }
        }

        

        
}//GEN-LAST:event_btnNewReserveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        if(ConRoomCalendar.cldrView.getDate().getDate()<Calendar.getInstance().get(Calendar.DATE)){
                JOptionPane.showMessageDialog(null, "Cannot delete on the specified day");
        }else{
            if(temp==0){
                    int count = tblReserveA.getSelectedRowCount();
                    int row = tblReserveA.getSelectedRow();
                    int col=tblReserveA.getColumnCount();

                    boolean free=true;
                    String [] str_delete = new String[col];

                    if(count==0){
                        JOptionPane.showMessageDialog(null, "You havn't selected a row!","Error Message",JOptionPane.ERROR_MESSAGE);
                    }else if (count>1){
                        JOptionPane.showMessageDialog(null, "Many rows are selected!","Error Message",JOptionPane.ERROR_MESSAGE);
                    }else if(count==1){
                        //loop to check if the selected rowA is occupied or vacant
                        for(int i=0;i<col;i++){
                            if(tblReserveA.getModel().getValueAt(row, i).toString().equals("Vacant")){
                                JOptionPane.showMessageDialog(null, "Cannot delete schedule that is already vacant!");
                                free=false;
                            }
                        }
                        //getting the dataA from the selected rowA then delete it
                        if(free==true){
                            for(int i=0;i<col-1;i++){
                                str_delete[i]=tblReserveA.getModel().getValueAt(row, i).toString();
                            }

                            int result = JOptionPane.showConfirmDialog(null, "Do you wish to delete it completely?",
                                    "Question Message",JOptionPane.YES_NO_OPTION);
                            if(result == JOptionPane.OK_OPTION){
                                String str="A";
                                frms.Home.database.deleteItem(str_delete,str);
                            }
                        }
                    }
            }else{
                int count = tblReserveB.getSelectedRowCount();
                int row = tblReserveB.getSelectedRow();
                int col=tblReserveB.getColumnCount();

                boolean free=true;
                String [] str_delete = new String[col];

                if(count==0){
                    JOptionPane.showMessageDialog(null, "You havn't selected a row!","Error Message",JOptionPane.ERROR_MESSAGE);
                }else if (count>1){
                    JOptionPane.showMessageDialog(null, "Many rows are selected!","Error Message",JOptionPane.ERROR_MESSAGE);
                }else if(count==1){
                    //loop to check if the selected rowA is occupied or vacant
                    for(int i=0;i<col;i++){
                        if(tblReserveB.getModel().getValueAt(row, i).toString().equals("Vacant")){
                            JOptionPane.showMessageDialog(null, "Cannot delete schedule that is already vacant!");
                            free=false;
                        }
                    }
                    //getting the data from the selected row then delete it
                    if(free==true){
                        for(int i=0;i<col-1;i++){
                            str_delete[i]=tblReserveB.getModel().getValueAt(row, i).toString();
                        }

                        int result = JOptionPane.showConfirmDialog(null, "Do you wish to delete it completely?",
                                "Question Message",JOptionPane.YES_NO_OPTION);
                        if(result == JOptionPane.OK_OPTION){
                            String str="B";
                            frms.Home.database.deleteItem(str_delete,str);
                        }
                    }
                }
            }
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblReserveAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReserveAMouseClicked

        temp=0;
        tblReserveB.clearSelection();

    }//GEN-LAST:event_tblReserveAMouseClicked

    private void tblReserveBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReserveBMouseClicked

        temp=1;
        tblReserveA.clearSelection();

    }//GEN-LAST:event_tblReserveBMouseClicked
    public boolean confirm_empNum(boolean check){

        JTextField txtnum= new JTextField();
        txtnum.setColumns(10);
        
        JLabel mylbl = new JLabel();
        mylbl.setText("Input Employee Number");
        JPanel myPanel = new JPanel();
        myPanel.add(mylbl);
        myPanel.add(txtnum);

        int result = JOptionPane.showConfirmDialog(null, myPanel, "Input MessageBox",JOptionPane.OK_CANCEL_OPTION);

        if(result == JOptionPane.OK_OPTION){
            String empDept="";
            String item=txtnum.getText();

            String empnum=item;
            empDept=frms.Home.database.searchData(item);
            if(empDept.equals("")){
                check=false;
                JOptionPane.showMessageDialog(null, "Employee Number not found","Error Message",JOptionPane.ERROR_MESSAGE);
            }else{
                check=true;
                ConRoom_Approval.txtnum.setText(empnum);
                ConRoom_Approval.txtdept.setText(empDept);
                }
        }  
        return check;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnDelete;
    public static javax.swing.JButton btnNewReserve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JLabel lbldateReserve;
    public static javax.swing.JTable tblReserveA;
    public static javax.swing.JTable tblReserveB;
    // End of variables declaration//GEN-END:variables

}
